library(tidyverse)
library(broom)
library(here)
biden <- read_csv(here("data", "biden.csv"))
# ggplot(biden, aes(horsepower, mpg)) +
#   geom_point() +
#   geom_smooth(method = "lm") +
#   theme_minimal()
view(viden)
view(biden)
library(tidyverse)
library(broom)
library(here)
biden <- read_csv(here("data", "biden.csv"))
view(biden)
ggplot(biden, aes(age, biden)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()
ggplot(biden, aes(age, biden)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()
biden_4_order_lm <- lm(biden ~ poly(age, 4, raw = TRUE), data = biden); tidy(biden_4_order_lm)
biden_4_order_lm <- lm(biden ~ poly(age, 4, raw = TRUE), data = biden) %>%
geom_point()
biden_4_order_lm <- lm(biden ~ poly(age, 4, raw = TRUE), data = biden) %>%
ggplot(aes(x=age, y=biden))
geom_point()
biden_4_order_lm <- lm(biden ~ poly(age, 4, raw = TRUE), data = biden)
ggplot(biden, aes(age, biden)) +
geom_point() +
geom_smooth(method = "lm", formula = biden ~ poly(age, 4, raw = TRUE))
biden_4_order_lm <- lm(biden ~ poly(age, 4, raw = TRUE), data = biden)
ggplot(biden, aes(age, biden)) +
geom_point() +
geom_smooth(method = "lm",
formula = y ~ poly(x, 4, raw = TRUE))
# p + stat_smooth(method="lm", se=TRUE, fill=NA,
#                 formula=y ~ poly(x, 3, raw=TRUE),colour="red")
biden_age_lm <- lm(biden ~ poly(age, 1, raw = TRUE), data = biden); tidy(biden_age_lm)
ggplot(biden, aes(age, biden)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()
biden_4_order_lm <- lm(biden ~ poly(age, 4, raw = TRUE), data = biden)
ggplot(biden, aes(age, biden)) +
geom_point() +
geom_smooth(method = "lm",
formula = y ~ poly(x, 4, raw = TRUE))
biden_4_order_lm <- lm(biden ~ poly(age, 4, raw = TRUE), data = biden)
ggplot(biden, aes(age, biden)) +
geom_point() +
geom_smooth(method = "lm",
formula = y ~ poly(x, 4, raw = TRUE))
biden_4_order_lm <- lm(biden ~ poly(age, 4, raw = TRUE), data = biden)
biden_4_order_lm
ggplot(biden, aes(age, biden)) +
geom_point() +
geom_smooth(method = "lm",
formula = y ~ poly(x, 4, raw = TRUE))
biden_4_order_lm <- lm(biden ~ poly(age, 4, raw = TRUE), data = biden); tidy(biden_4_order_lm)
ggplot(biden, aes(age, biden)) +
geom_point() +
geom_smooth(method = "lm",
formula = y ~ poly(x, 4, raw = TRUE))
biden_4_order_lm
biden_4_order_lm
vcov(Model1)
biden_4_order_lm
vcov(biden_4_order_lm)
biden_4_order_lm
vcov(biden_4_order_lm)
SEs = sqrt(diag(vcov(biden_4_order_lm)))
biden_4_order_lm
vcov(biden_4_order_lm)
SEs = sqrt(diag(vcov(biden_4_order_lm)))
SEs
# biden_4_order_lm
# vcov(biden_4_order_lm)
SEs = sqrt(diag(vcov(biden_4_order_lm)))
SEs
# biden_4_order_lm
# vcov(biden_4_order_lm)
SEs = sqrt(diag(vcov(biden_4_order_lm)))
SEs[1]
# biden_4_order_lm
# vcov(biden_4_order_lm)
SEs = sqrt(diag(vcov(biden_4_order_lm)))
SEs
SEs[1]
SEs[2]
SEs[3]
SEs
# t_statistics_1
biden_4_order_lm
# t_statistics_1
biden_4_order_lm[1]
# t_statistics_1
biden_4_order_lm[2]
# t_statistics_1
biden_4_order_lm[3]
# t_statistics_1
biden_4_order_lm[1]
# t_statistics_1
biden_4_order_lm[1][1]
# t_statistics_1
biden_4_order_lm[1][1][1]
# t_statistics_1
biden_4_order_lm[1][2
# t_statistics_1
biden_4_order_lm[1][2]
# t_statistics_1
biden_4_order_lm[1][1]
# t_statistics_1
biden_4_order_lm$coefficients
# t_statistics_1
biden_4_order_lm$coefficients[1]
# t_statistics_1
biden_4_order_lm$coefficients[2]
# t_statistics_1
biden_4_order_lm$coefficients
# t_statistics_1
print(2/2)
# t_statistics_1
print(3/2)
# t_statistics_1
t_statistics_calculation <- function(position){
biden_4_order_lm$coefficients[position] / SEs[position]
}
# 1_order_t_statistics <- biden_4_order_lm$coefficients[2] / SEs[2]
1_order_t_statistics <- t_statistics_calculation(2)
# t_statistics_1
t_statistics_calculation <- function(position){
biden_4_order_lm$coefficients[position] / SEs[position]
}
# 1_order_t_statistics <- biden_4_order_lm$coefficients[2] / SEs[2]
first_order_t_statistics <- t_statistics_calculation(2)
first_order_t_statistics
# t_statistics_1
t_statistics_calculation <- function(position){
biden_4_order_lm$coefficients[position] / SEs[position]
}
# 1_order_t_statistics <- biden_4_order_lm$coefficients[2] / SEs[2]
first_order_t_statistics <- t_statistics_calculation(2)
second_order_t_statistics <- t_statistics_calculation(3)
third_order_t_statistics <- t_statistics_calculation(4)
fourth_order_t_statistics <- t_statistics_calculation(5)
broom::tidy(biden_4_order_lm)
# t_statistics_1
t_statistics_calculation <- function(position){
biden_4_order_lm$coefficients[position] / SEs[position]
}
# 1_order_t_statistics <- biden_4_order_lm$coefficients[2] / SEs[2]
first_order_t_statistics <- t_statistics_calculation(2)
first_order_t_statistics
second_order_t_statistics <- t_statistics_calculation(3)
second_order_t_statistics
third_order_t_statistics <- t_statistics_calculation(4)
third_order_t_statistics
fourth_order_t_statistics <- t_statistics_calculation(5)
fourth_order_t_statistics
# t_statistics_1
t_statistics_calculation <- function(position){
biden_4_order_lm$coefficients[position] / SEs[position]
}
intercept_order_t_statistics <- t_statistics_calculation(1)
intercept_order_t_statistics
first_order_t_statistics <- t_statistics_calculation(2)
first_order_t_statistics
second_order_t_statistics <- t_statistics_calculation(3)
second_order_t_statistics
third_order_t_statistics <- t_statistics_calculation(4)
third_order_t_statistics
fourth_order_t_statistics <- t_statistics_calculation(5)
fourth_order_t_statistics
# According to the result, my solution given above is correct
broom::tidy(biden_4_order_lm)
biden_4_order_lm <- lm(biden ~ poly(age, 4, raw = TRUE), data = biden); tidy(biden_4_order_lm)
ggplot(biden, aes(age, biden)) +
geom_point() +
geom_smooth(method = "lm",
formula = y ~ poly(x, 4, raw = TRUE))
biden_age_lm <- lm(biden ~ poly(age, 1, raw = TRUE), data = biden); tidy(biden_age_lm)
ggplot(biden, aes(age, biden)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()
t_result = biden_4_order_lm$coefficients/SEs
# According to the result, my solution given above is correct
broom::tidy(biden_4_order_lm)
print(t_result)
# According to the result, my solution given above is correct
broom::tidy(biden_4_order_lm)
t_result = biden_4_order_lm$coefficients/SEs
print(t_result)
# According to the result, my solution given above is correct
broom::tidy(biden_4_order_lm)
t_result = biden_4_order_lm$coefficients/SEs
print(t_result)
print(abs(t_result > 1.96))
# According to the result, my solution given above is correct
broom::tidy(biden_4_order_lm)
t_result = biden_4_order_lm$coefficients/SEs
print(abs(t_result > 1.96))
# According to the result, my solution given above is correct
broom::tidy(biden_4_order_lm)
t_result = biden_4_order_lm$coefficients/SEs
abs(t_result > 1.96)
# According to the result, my solution given above is correct
broom::tidy(biden_4_order_lm)
t_result = biden_4_order_lm$coefficients/SEs
abs(t_result > 1.96)
# According to the result, my solution given above is correct
# broom::tidy(biden_4_order_lm)
t_result = biden_4_order_lm$coefficients/SEs
abs(t_result < 1.96)
# According to the result, my solution given above is correct
# broom::tidy(biden_4_order_lm)
biden_4_order_lm <- lm(biden ~ poly(age, 4, raw = TRUE), data = biden); tidy(biden_4_order_lm)
ggplot(biden, aes(age, biden)) +
geom_point() +
geom_smooth(method = "lm",
formula = y ~ poly(x, 4, raw = TRUE))
biden_age_lm <- lm(biden ~ poly(age, 1, raw = TRUE), data = biden); tidy(biden_age_lm)
ggplot(biden, aes(age, biden)) +
geom_point() +
geom_smooth(method = "lm")
knitr::opts_chunk$set(eval = FALSE, echo = TRUE, message = FALSE, warning = FALSE)
ggplot(mse_knn, aes(k, err_test)) +
geom_point() +
geom_line() +
geom_line(aes(y = logistic_test_error), linetype="dotted")+
labs(
title = "KNN and logistic regression test error rate",
y = "Test error rate",
x = "Number of K"
)
ggplot(mse_knn, aes(k, err_test)) +
geom_point() +
geom_line() +
geom_line(aes(y = logistic_test_error), linetype="dotted")+
labs(
title = "KNN and logistic regression test error rate",
y = "Test error rate",
x = "Number of K"
)
library(tidyverse)
library(here) # for loading data; this is *optional*
library(tidymodels) # for accuracy, splitting, etc.
library(foreign) # for the (stata) data
library(class) # for knn()
library(MASS) # for lda() and qda()
titanic <- read_csv(here("data", "titanic.csv")) %>%
mutate(Survived = factor(Survived))
titanic_split <- initial_split(data = titanic,
prop = 0.7)
titanic_train <- training(titanic_split)
titanic_test <- testing(titanic_split)
mse_knn <- tibble(k = 1:100,
knn_train = map(k, ~ class::knn(dplyr::select(titanic_train, -Survived),
test = dplyr::select(titanic_train, -Survived),
cl = titanic_train$Survived, k = .)),
knn_test = map(k, ~ class::knn(dplyr::select(titanic_train, -Survived),
test = dplyr::select(titanic_test, -Survived),
cl = titanic_train$Survived, k = .)),
err_train = map_dbl(knn_train, ~ mean(titanic_test$Survived != .)),
err_test = map_dbl(knn_test, ~ mean(titanic_test$Survived != .)))
mse_knn
# done in the previous chunk responding to question 3
library(dplyr)
knn_test_error <- dplyr::select(mse_knn, "k", "err_test")
knn_test_error
set.seed(1234)
# model fitting via tidymodels
# define mod and engine
mod <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification")
# fit
logit <- mod %>%
fit(Survived ~ .,
data = titanic_train)
# eval
logit %>%
predict(titanic_train) %>%
bind_cols(titanic_train) %>%
metrics(truth = Survived,
estimate = .pred_class)
set.seed(1234)
# model fitting via tidymodels
# define mod and engine
mod <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification")
# fit
logit <- mod %>%
fit(Survived ~ .,
data = titanic_test)
# eval
logit %>%
predict(titanic_test) %>%
bind_cols(titanic_test) %>%
metrics(truth = Survived,
estimate = .pred_class)
logistic_test_error <- logit %>%
predict(titanic_test) %>%
bind_cols(titanic_test) %>%
metrics(truth = Survived,
estimate = .pred_class)
logistic_test_error <- logistic_test_error$.estimate[1]
logistic_test_error <- 1 - logistic_test_error
logistic_test_error
ggplot(mse_knn, aes(k, err_test)) +
geom_point() +
geom_line() +
geom_line(aes(y = logistic_test_error), linetype="dotted")+
labs(
title = "KNN and logistic regression test error rate",
y = "Test error rate",
x = "Number of K"
)
library(tidyverse)
library(here) # for loading data; this is *optional*
library(tidymodels) # for accuracy, splitting, etc.
library(foreign) # for the (stata) data
library(class) # for knn()
library(MASS) # for lda() and qda()
titanic <- read_csv(here("data", "titanic.csv")) %>%
mutate(Survived = factor(Survived))
set.seed(1234)
titanic_split <- initial_split(data = titanic,
prop = 0.7)
titanic_train <- training(titanic_split)
titanic_test <- testing(titanic_split)
mse_knn <- tibble(k = 1:100,
knn_train = map(k, ~ class::knn(dplyr::select(titanic_train, -Survived),
test = dplyr::select(titanic_train, -Survived),
cl = titanic_train$Survived, k = .)),
knn_test = map(k, ~ class::knn(dplyr::select(titanic_train, -Survived),
test = dplyr::select(titanic_test, -Survived),
cl = titanic_train$Survived, k = .)),
err_train = map_dbl(knn_train, ~ mean(titanic_test$Survived != .)),
err_test = map_dbl(knn_test, ~ mean(titanic_test$Survived != .)))
mse_knn
set.seed(1234)
mse_knn <- tibble(k = 1:100,
knn_train = map(k, ~ class::knn(dplyr::select(titanic_train, -Survived),
test = dplyr::select(titanic_train, -Survived),
cl = titanic_train$Survived, k = .)),
knn_test = map(k, ~ class::knn(dplyr::select(titanic_train, -Survived),
test = dplyr::select(titanic_test, -Survived),
cl = titanic_train$Survived, k = .)),
err_train = map_dbl(knn_train, ~ mean(titanic_test$Survived != .)),
err_test = map_dbl(knn_test, ~ mean(titanic_test$Survived != .)))
mse_knn
# done in the previous chunk responding to question 3
library(dplyr)
knn_test_error <- dplyr::select(mse_knn, "k", "err_test")
knn_test_error
set.seed(1234)
# model fitting via tidymodels
# define mod and engine
mod <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification")
# fit
logit <- mod %>%
fit(Survived ~ .,
data = titanic_train)
# eval
logit %>%
predict(titanic_train) %>%
bind_cols(titanic_train) %>%
metrics(truth = Survived,
estimate = .pred_class)
set.seed(1234)
# model fitting via tidymodels
# define mod and engine
mod <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification")
# fit
logit <- mod %>%
fit(Survived ~ .,
data = titanic_test)
# eval
logit %>%
predict(titanic_test) %>%
bind_cols(titanic_test) %>%
metrics(truth = Survived,
estimate = .pred_class)
logistic_test_error <- logit %>%
predict(titanic_test) %>%
bind_cols(titanic_test) %>%
metrics(truth = Survived,
estimate = .pred_class)
logistic_test_error <- logistic_test_error$.estimate[1]
logistic_test_error <- 1 - logistic_test_error
logistic_test_error
ggplot(mse_knn, aes(k, err_test)) +
geom_point() +
geom_line() +
geom_line(aes(y = logistic_test_error), linetype="dotted")+
labs(
title = "KNN and logistic regression test error rate",
y = "Test error rate",
x = "Number of K"
)
library(tidyverse)
library(here) # for loading data; this is *optional*
library(tidymodels) # for accuracy, splitting, etc.
library(foreign) # for the (stata) data
library(class) # for knn()
library(MASS) # for lda() and qda()
titanic <- read_csv(here("data", "titanic.csv")) %>%
mutate(Survived = factor(Survived))
# Load libraries for this section
library(tidyverse)
library(here)
library(corrr)
library(amerika)
library(factoextra)
library(patchwork)
library(ggrepel)
# Read in cleaned and preprocessed 2019 ANES Pilot Data (35 FTs + democrat party feature)
anes <- read_rds(here("Data", "anes.rds"))
