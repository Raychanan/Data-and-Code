scale_color_gradient(high = amerika_palettes$Democrat[1],
low = amerika_palettes$Republican[1]) +
labs(color = "Contribution",
title = "") +
theme_minimal()
# custom, full viz
anes %>%
ggplot(aes(pca_fit$x[, 1],
pca_fit$x[, 2],
col = factor(democrat))) +
geom_point() +
stat_ellipse() +
scale_color_manual(values=c(amerika_palettes$Republican[1],
amerika_palettes$Democrat[1]),
name="Party",
breaks=c("0", "1"),
labels=c("Non-Democrat", "Democrat")) +
labs(x = "Principal Component 1",
y = "Principal Component 2") +
theme_minimal()
#
# LLE
# libraries needed for this section
library(tidyverse)
library(lle)
library(amerika)
library(parallel)
library(ggrepel)
library(tictoc)
library(patchwork)
# scale the data first
anes_scaled <- anes[, 1:35] %>%
scale() %>%
as_tibble()
cores <- detectCores() - 1
# find optimal k
tic()
find_k <- calc_k(anes_scaled,
m = 2,
parallel = TRUE,
cpus = cores)
toc() # ~ 10.9 minutes on 3 cores; ~ 9.2 minutes on 7 cores
# inspect -- what is the optimal value for k? (a couple options...)
## option 1: manually by arranging
find_k %>%
arrange(rho) # looks like k = 19 is optimal
## option 2: extracting via which.min()
find_k[which.min(find_k$rho), ]
# Extract based on min \rho
optimal_k_rho <- find_k %>%
arrange(rho) %>%
filter(rho == min(.))
## viz
find_k %>%
arrange(rho) %>%
ggplot(aes(k, rho)) +
geom_line() +
geom_point(color = ifelse(find_k$k == min(find_k$k),
"red",
"black")) +
geom_vline(xintercept = optimal_k_rho$k,
linetype = "dashed",
color = "red") +
geom_label_repel(aes(label = k),
box.padding = unit(0.5, 'lines')) +
labs(x = "Neighborhood Size (k)",
y = expression(rho)) +
theme_minimal()
# fit
{
tic()
lle_fit <- lle(anes_scaled,
m = 2,
nnk = TRUE,
k = optimal_k_rho$k)
toc() # ~ 1.5 minutes on 3 cores; ~ 1.4 minutes on 7 cores
}
# full LLE viz
anes %>%
ggplot(aes(x = lle_fit$Y[,1],
y = lle_fit$Y[,2],
col = factor(democrat))) +
geom_point() +
stat_ellipse() +
scale_color_manual(values=c(amerika_palettes$Republican[1],
amerika_palettes$Democrat[1]),
name="Party",
breaks=c("0", "1"),
labels=c("Non-Democrat",
"Democrat")) +
labs(x = "First Dimension",
y = "Second Dimension",
title = "LLE") +
theme_minimal()
# Compare with raw inputs
p1 <- anes %>%
ggplot(aes(Trump, Obama,
color = factor(democrat))) +
geom_density_2d() +
scale_color_manual(values=c(amerika_palettes$Republican[1],
amerika_palettes$Democrat[1]),
name="Party",
breaks=c("0", "1"),
labels=c("Non-Democrat",
"Democrat")) +
labs(x = "Feelings Toward Trump",
y = "Feelings Toward Obama") +
theme_minimal()
p2 <- anes %>%
ggplot(aes(ICE, Illegal,
color = factor(democrat))) +
geom_density_2d() +
scale_color_manual(values=c(amerika_palettes$Republican[1],
amerika_palettes$Democrat[1]),
name="Party",
breaks=c("0", "1"),
labels=c("Non-Democrat",
"Democrat")) +
labs(x = "Feelings Toward ICE",
y = "Feelings Toward Illegal Immigrants") +
theme_minimal()
p3 <- anes %>%
ggplot(aes(UN, NATO,
color = factor(democrat))) +
geom_density_2d() +
scale_color_manual(values=c(amerika_palettes$Republican[1],
amerika_palettes$Democrat[1]),
name="Party",
breaks=c("0", "1"),
labels=c("Non-Democrat",
"Democrat")) +
labs(x = "Feelings Toward the United Nations",
y = "Feelings Toward NATO") +
theme_minimal()
p4 <- anes %>%
ggplot(aes(Palestine, Israel,
color = factor(democrat))) +
geom_density_2d() +
scale_color_manual(values=c(amerika_palettes$Republican[1],
amerika_palettes$Democrat[1]),
name="Party",
breaks=c("0", "1"),
labels=c("Non-Democrat",
"Democrat")) +
labs(x = "Feelings Toward Palestine",
y = "Feelings Toward Israel") +
theme_minimal()
# viz together
(p1 + p2) /
(p3 + p4)
#
# t-SNE
# libraries needed for this section
library(tidyverse)
library(amerika)
library(tictoc)
library(patchwork)
library(Rtsne)
library(umap)
library(tidymodels)
library(embed)
set.seed(1234)
{
tic()
# perplexity = 2
tsne_2 <- Rtsne(as.matrix(anes[ ,1:35]),
perplexity = 2)
perp_2 <- anes %>%
ggplot(aes(tsne_2$Y[,1], tsne_2$Y[,2],
col = factor(democrat))) +
geom_point() +
stat_ellipse() +
scale_color_manual(values=c(amerika_palettes$Republican[1],
amerika_palettes$Democrat[1]),
name="Democrat",
breaks=c("0", "1"),
labels=c("No",
"Yes")) +
ylim(-100, 100) +
xlim(-100, 100) +
labs(x = "First dimension",
y = "Second dimension",
subtitle = "Perplexity = 2") +
theme_minimal()
# perplexity = 25
tsne_25 <- Rtsne(as.matrix(anes[ ,1:35]),
perplexity = 25)
perp_25 <- anes %>%
ggplot(aes(tsne_25$Y[,1], tsne_25$Y[,2],
col = factor(democrat))) +
geom_point() +
stat_ellipse() +
scale_color_manual(values=c(amerika_palettes$Republican[1],
amerika_palettes$Democrat[1]),
name="Democrat",
breaks=c("0", "1"),
labels=c("No",
"Yes")) +
ylim(-100, 100) +
xlim(-100, 100) +
labs(x = "First dimension",
y = "Second dimension",
subtitle = "Perplexity = 25") +
theme_minimal()
# perplexity = 50
tsne_50 <- Rtsne(as.matrix(anes[ ,1:35]),
perplexity = 50)
perp_50 <- anes %>%
ggplot(aes(tsne_50$Y[,1], tsne_50$Y[,2],
col = factor(democrat))) +
geom_point() +
stat_ellipse() +
scale_color_manual(values=c(amerika_palettes$Republican[1],
amerika_palettes$Democrat[1]),
name="Democrat",
breaks=c("0", "1"),
labels=c("No",
"Yes")) +
ylim(-100, 100) +
xlim(-100, 100) +
labs(x = "First dimension",
y = "Second dimension",
subtitle = "Perplexity = 50") +
theme_minimal()
# perplexity = 500
tsne_500 <- Rtsne(as.matrix(anes[ ,1:35]),
perplexity = 500)
perp_500 <- anes %>%
ggplot(aes(tsne_500$Y[,1], tsne_500$Y[,2],
col = factor(democrat))) +
geom_point() +
stat_ellipse() +
scale_color_manual(values=c(amerika_palettes$Republican[1],
amerika_palettes$Democrat[1]),
name="Democrat",
breaks=c("0", "1"),
labels=c("No",
"Yes")) +
ylim(-100, 100) +
xlim(-100, 100) +
labs(x = "First dimension",
y = "Second dimension",
subtitle = "Perplexity = 500") +
theme_minimal()
toc()
} # ~1 minute
# Visualize
tsne_plots <- (perp_2 + perp_25) /
(perp_50 + perp_500)
tsne_plots
## with annotation if desired
#tsne_plots + plot_annotation(title = "t-SNE Results Across a Range of Perplexity",
#                             subtitle = "Color conditional on Party Affiliation")
#
# UMAP
# finally, let's take a look at UMAP
# epochs = 500
umap_fit_5 <- anes[,1:35] %>%
umap(n_neighbors = 5,
metric = "euclidean",
n_epochs = 500)
umap_fit_5 <- anes %>%
mutate_if(.funs = scale,
.predicate = is.numeric,
scale = FALSE) %>%
mutate(First_Dimension = umap_fit_5$layout[,1],
Second_Dimension = umap_fit_5$layout[,2]) %>%
gather(key = "Variable",
value = "Value",
c(-First_Dimension, -Second_Dimension, -democrat))
k_5 <- ggplot(umap_fit_5, aes(First_Dimension, Second_Dimension,
col = factor(democrat))) +
geom_point(alpha = 0.6) +
scale_color_manual(values=c(amerika_palettes$Republican[1],
amerika_palettes$Democrat[1]),
name="Democrat",
breaks=c("-0.418325434439179",
"0.581674565560822"),
labels=c("No",
"Yes")) +
labs(title = " ",
subtitle = "Neighborhood size: 5; Epochs = 500",
x = "First Dimension",
y = "Second Dimension") +
theme_minimal()
# epochs = 20
umap_fit_e_20 <- anes[,1:35] %>%
umap(n_neighbors = 5,
metric = "euclidean",
n_epochs = 20)
umap_fit_e_20 <- anes %>%
mutate_if(.funs = scale,
.predicate = is.numeric,
scale = FALSE) %>%
mutate(First_Dimension = umap_fit_e_20$layout[,1],
Second_Dimension = umap_fit_e_20$layout[,2]) %>%
gather(key = "Variable",
value = "Value",
c(-First_Dimension, -Second_Dimension, -democrat))
e_20 <- ggplot(umap_fit_e_20, aes(First_Dimension, Second_Dimension,
col = factor(democrat))) +
geom_point(alpha = 0.6) +
scale_color_manual(values=c(amerika_palettes$Republican[1],
amerika_palettes$Democrat[1]),
name="Democrat",
breaks=c("-0.418325434439179",
"0.581674565560822"),
labels=c("No",
"Yes")) +
labs(title = " ",
subtitle = "Neighborhood size: 5; Epochs = 20",
x = "First Dimension",
y = "Second Dimension") +
theme_minimal()
# side by side
k_5 + e_20
set.seed(1234)
{
tic()
# perplexity = 1000
tsne_1000 <- Rtsne(as.matrix(anes[ ,1:35]),
perplexity = 1000)
perp_1000 <- anes %>%
ggplot(aes(tsne_1000$Y[,1], tsne_1000$Y[,2],
col = factor(democrat))) +
geom_point() +
stat_ellipse() +
scale_color_manual(values=c(amerika_palettes$Republican[1],
amerika_palettes$Democrat[1]),
name="Democrat",
breaks=c("0", "1"),
labels=c("No",
"Yes")) +
ylim(-100, 100) +
xlim(-100, 100) +
labs(x = "First dimension",
y = "Second dimension",
subtitle = "Perplexity = 1000") +
theme_minimal()
toc()
}
# Visualize
tsne_plots <- (perp_1000)
tsne_plots
# 2. The tradeoff in UMAP between global and local behavior is controlled by the n_neighbors hyperparameter, where larger values mean more neighbors to include in the fuzzy search region, versus fewer neighbors with smaller values for this hyperparameter. Fit a similarly global version of UMAP to the ANES data by cranking up the n_neighbors hyperparameter to 1000. Plot the results, colored by party. *Caution*: this will take about 5-7 minutes to run.
# epochs = 500, n_neighbors = 1000
umap_fit_5 <- anes[,1:35] %>%
umap(n_neighbors = 1000,
metric = "euclidean",
n_epochs = 500)
umap_fit_5 <- anes %>%
mutate_if(.funs = scale,
.predicate = is.numeric,
scale = FALSE) %>%
mutate(First_Dimension = umap_fit_5$layout[,1],
Second_Dimension = umap_fit_5$layout[,2]) %>%
gather(key = "Variable",
value = "Value",
c(-First_Dimension, -Second_Dimension, -democrat))
k_5 <- ggplot(umap_fit_5, aes(First_Dimension, Second_Dimension,
col = factor(democrat))) +
geom_point(alpha = 0.6) +
scale_color_manual(values=c(amerika_palettes$Republican[1],
amerika_palettes$Democrat[1]),
name="Democrat",
breaks=c("-0.418325434439179",
"0.581674565560822"),
labels=c("No",
"Yes")) +
labs(title = " ",
subtitle = "Neighborhood size: 5; Epochs = 500",
x = "First Dimension",
y = "Second Dimension") +
theme_minimal()
# epochs = 20, n_neighbors = 1000
umap_fit_e_20 <- anes[,1:35] %>%
umap(n_neighbors = 1000,
metric = "euclidean",
n_epochs = 20)
umap_fit_e_20 <- anes %>%
mutate_if(.funs = scale,
.predicate = is.numeric,
scale = FALSE) %>%
mutate(First_Dimension = umap_fit_e_20$layout[,1],
Second_Dimension = umap_fit_e_20$layout[,2]) %>%
gather(key = "Variable",
value = "Value",
c(-First_Dimension, -Second_Dimension, -democrat))
e_20 <- ggplot(umap_fit_e_20, aes(First_Dimension, Second_Dimension,
col = factor(democrat))) +
geom_point(alpha = 0.6) +
scale_color_manual(values=c(amerika_palettes$Republican[1],
amerika_palettes$Democrat[1]),
name="Democrat",
breaks=c("-0.418325434439179",
"0.581674565560822"),
labels=c("No",
"Yes")) +
labs(title = " ",
subtitle = "Neighborhood size: 5; Epochs = 20",
x = "First Dimension",
y = "Second Dimension") +
theme_minimal()
# side by side
k_5 + e_20
# 3. Do these global version of the algorithms reveal similar structure in the projection space or not? Give just a couple sentences describing your thoughts on global vs. local behavior, and also in comparing the t-SNE and UMAP algorithms.
source('~/Github/Data-and-Code/code/2-25_dimension reduc.R')
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
# Reference: cran.r-project.org/web/packages/philentropy/vignettes/Distances.html
library(philentropy)
observation_0 <- c(0, 0, 0, 0)
observation_1 <- c(2, 2, 3, 1)
observation_2 <- c(1, 1, -2, 2)
observation_3 <- c(1, -2, -2, -1)
observation_4 <- c(3, 3, 2, 2)
observation_5 <- c(-3, 2, -1, 1)
distance_data <- rbind(observation_0,observation_1,observation_2,
observation_3,observation_4,observation_5)
distance_1_data <- rbind(observation_0, observation_1)
distance_1 <- distance(distance_1_data, method = "euclidean")
distance_2_data <- rbind(observation_0, observation_2)
distance_2 <- distance(distance_2_data, method = "euclidean")
distance_3_data <- rbind(observation_0, observation_3)
distance_3 <- distance(distance_3_data, method = "euclidean")
distance_4_data <- rbind(observation_0, observation_4)
distance_4 <- distance(distance_4_data, method = "euclidean")
distance_5_data <- rbind(observation_0, observation_5)
distance_5 <- distance(distance_5_data, method = "euclidean")
cat("The distance of observation 1: ", distance_1)
cat("The distance of observation 2: ", distance_2)
cat("The distance of observation 3: ", distance_3)
cat("The distance of observation 4: ", distance_4)
cat("The distance of observation 5: ", distance_5)
# Reference: cran.r-project.org/web/packages/philentropy/vignettes/Distances.html
library(philentropy)
observation_0 <- c(0, 0, 0, 0)
observation_1 <- c(2, 2, 3, 1)
observation_2 <- c(1, 1, -2, 2)
observation_3 <- c(1, -2, -2, -1)
observation_4 <- c(3, 3, 2, 2)
observation_5 <- c(-3, 2, -1, 1)
distance_data <- rbind(observation_0,observation_1,observation_2,
observation_3,observation_4,observation_5)
distance_matrix <- as.matrix(dist(distance_data, method = "euclidean"))
distance_matrix
cat("The distance of observation 1: ", distance_1)
cat("The distance of observation 2: ", distance_2)
cat("The distance of observation 3: ", distance_3)
cat("The distance of observation 4: ", distance_4)
cat("The distance of observation 5: ", distance_5)
cat("The distance of observation 1: ", distance_matrix[1,1])
cat("The distance of observation 1: ", distance_matrix[1])
cat("The distance of observation 1: ", distance_matrix[2])
distance_matrix
distance_matrix
cat("The distance of observation 5: ", distance_matrix[6])
# Cluster Plot with fviz_cluster
res.fcm2 <- ppclust2(res.fcm, "kmeans")
source('~/.active-rstudio-document', echo=TRUE)
# Cluster Plot with fviz_cluster
res.fcm2 <- ppclust2(res.fcm, "kmeans")
source('~/.active-rstudio-document', echo=TRUE)
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
# Reference: https://www.datanovia.com/en/lessons/fuzzy-clustering-essentials/
# cmeans-r-function-compute-fuzzy-clustering/
# Membership coefficient
# head(fcm_fit$membership)
# Observation groups/clusters
# fcm_fit$cluster
# Creat data for the plot
trump_and_obama <- anes[, 1:2]
true_democrat_label <- anes[, 36]
df <- data.frame(
trump_and_obama, fcm_fit$membership,
fcm_fit$cluster, true_democrat_label
)
# Plot
e <- ggplot(df, aes(Trump, Obama, label = democrat)) +
geom_label(aes(colour = factor(fcm_fit.cluster))) +
labs(
title = "Clustering Assignments Based on FCM",
subtitle = "Number 1 in the label: true Democrat; \
Number 0 in the label: true Republican"
)
e
# Reference: https://www.datanovia.com/en/lessons/fuzzy-clustering-essentials/
# cmeans-r-function-compute-fuzzy-clustering/
# Membership coefficient
# head(fcm_fit$membership)
# Observation groups/clusters
# fcm_fit$cluster
# Creat data for the plot
trump_and_obama <- anes[, 1:2]
true_democrat_label <- anes[, 36]
df <- data.frame(
trump_and_obama, fcm_fit$membership,
fcm_fit$cluster, true_democrat_label
)
# Plot
e <- ggplot(df, aes(Trump, Obama, label = democrat)) +
geom_label(aes(colour = factor(fcm_fit.cluster))) +
labs(
title = "Clustering Assignments Based on FCM",
subtitle = "Number 1 in the label: true Democrat;  \
Number 0 in the label: true Republican"
)
e
# Observation groups/clusters
fcm_fit$cluster
e
mean(ifelse(ifelse(fcm_fit$cluster,1,2) == anes$democrat,1,0 ))
mean(ifelse(ifelse(fcm_fit$cluster,1,2) == anes$democrat,0,1 ))
